
#!/bin/bash
SWIFT - Secure Ubuntu Interactive Framework
ASCII Text for SWIFT acronym
echo -e " ██╗ ██╗██╗██████╗ ██████╗ ██████╗ ███████╗ ██║ ██║██║██╔══██╗ ██╔═══ ██╗██╔══██╗██╔════╝ ███████║██║██████╔╝ ██║ ██║██████╔╝███████╗ ██╔══██║██║██╔══██╗ ██║ ██║██╔═══╝ ╚════██║ ██║ ██║██║██║ ██║╚██████ ██║ ███████║ ╚═╝ ╚═╝╚═╝╚═╝ ╚═╝ ╚═════╝ ╚═╝ ╚══════╝ "
Function to display options
show_menu() { echo "SWIFT - Secure Web Interactive Framework Technology" echo echo "A - Users and Passwords" echo "B - Permissions" echo "C - Authorized Users" echo "D - Insecure Passwords" echo "E - Groups" echo "F - Hidden Users" echo "G - Suspicious Users" echo "H - Login Details" echo "I - Sudoers" echo "J - Firewall" echo "K - Updates" echo "L - Media/Unauthorized Files" echo "M - Home Directory Check" echo "N - System Control" echo "O - File Permissions" echo "P - Services" echo "Q - Crontab" echo "R - Bad Programs" echo "S - Firefox Settings" echo "T - OpenSSH Configuration" echo "U - Quit"
wasm
Copy code
echo
read -rp "Enter your option (A-U): " choice
echo

case "$choice" in
    A|a) users_passwords ;;
    B|b) permissions ;;
    C|c) authorized_users ;;
    D|d) insecure_passwords ;;
    E|e) groups ;;
    F|f) hidden_users ;;
    G|g) suspicious_users ;;
    H|h) login_details ;;
    I|i) sudoers ;;
    J|j) firewall ;;
    K|k) updates ;;
    L|l) media_unauthorized_files ;;
    M|m) home_directory_check ;;
    N|n) system_control ;;
    O|o) file_permissions ;;
    P|p) services ;;
    Q|q) crontab ;;
    R|r) bad_programs ;;
    S|s) firefox_settings ;;
    T|t) ssh_configuration ;;
    U|u) quit ;;
    *) echo "Invalid option. Please try again." ; echo ; show_menu ;;
esac

}
Function to display users and their password details
users_passwords() { echo "Users and Passwords" echo 
bash
Copy code
# Display list of users and their details
cat /etc/passwd

# Prompt for username and display their password details
read -rp "Enter the username: " username

grep "^$username:" /etc/shadow

echo
show_menu

}
Function to display permissions for a file
permissions() { echo "Permissions" echo 
bash
Copy code
# Prompt for a file path and display its permissions
read -rp "Enter the file path: " file_path

ls -l "$file_path"

echo
show_menu

}
Function to display authorized users
authorized_users() { echo "Authorized Users" 
bash
Copy code
# Display list of authorized users
getent group sudo

echo
show_menu

}
Function to display users with insecure passwords
insecure_passwords() { echo "Insecure Passwords" 
bash
Copy code
# Display list of users with insecure passwords
awk -F':' 'length($2) < 8 {print $1}' /etc/shadow

echo
show_menu

}
Function to display groups
groups() { echo "Groups"
Copy code
# Display list of groups
cat /etc/group

echo
show_menu

}
Function to display hidden users
hidden_users() { echo "Hidden Users" 
bash
Copy code
# Display list of hidden users (UID less than 1000)
awk -F':' '$3 < 1000 {print $1}' /etc/passwd

echo
show_menu

}
Function to display suspicious users
suspicious_users() { echo "Suspicious Users" 
bash
Copy code
# Display list of suspicious users (UID greater than 1000)
awk -F':' '$3 > 1000 {print $1}' /etc/passwd

echo
show_menu

}
Function to display login details
login_details() { echo "Login Details" 
bash
Copy code
# Display list of last logged-in users
last

echo
show_menu

}
Function to display sudoers
sudoers() { echo "Sudoers" 
bash
Copy code
# Display list of sudoers
grep -Po '^sudo.+:\K.*$' /etc/group

echo
show_menu

}
Function to display firewall status
firewall() { echo "Firewall" 
bash
Copy code
# Display firewall status
ufw status

echo
show_menu

}
Function to check for system updates
updates() { echo "Updates" 
sql
Copy code
# Check for system updates
apt update
apt list --upgradable

echo
show_menu

}
Function to display media or unauthorized files
media_unauthorized_files() { echo "Media/Unauthorized Files" 
bash
Copy code
# Display list of media or unauthorized files
find / -type f -exec file {} \; | grep -v "authorized"

echo
show_menu

}
Function to check home directory
home_directory_check() { echo "Home Directory Check" 
bash
Copy code
# Display list of users and their home directories
awk -F':' '{print $1, $6}' /etc/passwd

echo
show_menu

}
Function to control system
system_control() { echo "System Control"
bash
Copy code
# Prompt for system control option
read -rp "Enter the system control option (start/stop/restart): " option

# Control the system based on the option
if [[ "$option" == "start" ]]; then
    systemctl start "$service"
elif [[ "$option" == "stop" ]]; then
    systemctl stop "$service"
elif [[ "$option" == "restart" ]]; then
    systemctl restart "$service"
else
    echo "Invalid option. Please try again."
fi

echo
show_menu

}
Function to check file permissions
file_permissions() { echo "File Permissions"
bash
Copy code
# Prompt for a file path and display its permissions
read -rp "Enter the file path: " file_path

stat "$file_path"

echo
show_menu

}
Function to display services
services() { echo "Services" 
bash
Copy code
# Display list of services
systemctl list-units --type=service

echo
show_menu

}
Function to display crontab
crontab() { echo "Crontab" 
bash
Copy code
# Display crontab details
crontab -l

echo
show_menu

}
Function to display bad programs
bad_programs() { echo "Bad Programs" 
bash
Copy code
# Display list of bad programs
apt list --installed | grep -i "virus\|malware\|spyware"

echo
show_menu

}
Function to configure Firefox settings
firefox_settings() { echo "Firefox Settings" echo "-------------------------------------------"
bash
Copy code
# Prompt for Firefox setting option
read -rp "Enter the Firefox setting option (1-5): " option

# Configure Firefox settings based on the option
case "$option" in
    1) echo "Setting 1 chosen" ;;
    2) echo "Setting 2 chosen" ;;
    3) echo "Setting 3 chosen" ;;
    4) echo "Setting 4 chosen" ;;
    5) echo "Setting 5 chosen" ;;
    *) echo "Invalid option. Please try again." ;;
esac

echo
show_menu

}
Function to configure OpenSSH
ssh_configuration() { echo "OpenSSH Configuration"} 
bash
Copy code
# Prompt for OpenSSH configuration option
read -rp "Enter the OpenSSH configuration option (1-4): " option

# Configure OpenSSH based on the option
case "$option" in
    1) echo "Configuration 1 chosen" ;;
    2) echo "Configuration 2 chosen" ;;
    3) echo "Configuration 3 chosen" ;;
    4) echo "Configuration 4 chosen" ;;
    *) echo "Invalid option. Please try again." ;;
esac

echo
show_menu

}
Function to quit the program
quit() { echo "Quitting SWIFT..." exit 0 }
Start the program
show_menu

